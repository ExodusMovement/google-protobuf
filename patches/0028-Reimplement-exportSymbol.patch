From 633b4c7af3154b69a67cf22378065a3cc04531e2 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=A1=D0=BA=D0=BE=D0=B2=D0=BE=D1=80=D0=BE=D0=B4=D0=B0=20?=
 =?UTF-8?q?=D0=9D=D0=B8=D0=BA=D0=B8=D1=82=D0=B0=20=D0=90=D0=BD=D0=B4=D1=80?=
 =?UTF-8?q?=D0=B5=D0=B5=D0=B2=D0=B8=D1=87?= <chalkerx@gmail.com>
Date: Wed, 2 Sep 2020 11:42:35 +0300
Subject: [PATCH 28/28] Reimplement exportSymbol

---
 google-protobuf.js | 29 +++++++++++++++++++++++++++++
 1 file changed, 29 insertions(+)

diff --git a/google-protobuf.js b/google-protobuf.js
index d8144f5..13d3d8d 100644
--- a/google-protobuf.js
+++ b/google-protobuf.js
@@ -3057,3 +3057,32 @@ exports.ExtensionFieldBinaryInfo = jspb.ExtensionFieldBinaryInfo;
 exports.inherits = goog.inherits;
 exports.object = { extend: goog.object.extend };
 exports.typeOf = goog.typeOf;
+
+// Reimplemented
+exports.exportSymbol = (path, value, { proto }) => {
+  const parts = path.split('.')
+  for (const part of parts) {
+    if (!/^[a-z][a-z0-9_]*$/.test(part) || part === 'constructor') {
+      throw new Error('exportSymbol: Unexpected path')
+    }
+  }
+
+  const final = parts.pop()
+  if (value !== null || parts[0] !== 'proto' || !proto || !final) {
+    throw new Error('exportSymbol: Unexpected scope')
+  }
+
+  let curr = proto
+  for (const part of parts.slice(1)) {
+    if (curr[part] && Object.getPrototypeOf(curr[part]) !== Object.prototype) {
+      throw new Error('exportSymbol: Unexpected non-plain-object')
+    }
+    if (!curr[part]) curr[part] = {}
+    curr = curr[part]
+  }
+
+  if (final in curr) {
+    throw new Error('exportSymbol: already defined!')
+  }
+  curr[final] = value
+}
-- 
2.28.0

