From 00b22366fdb91790941ef3775f0124fc45bc9dd0 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=D0=A1=D0=BA=D0=BE=D0=B2=D0=BE=D1=80=D0=BE=D0=B4=D0=B0=20?=
 =?UTF-8?q?=D0=9D=D0=B8=D0=BA=D0=B8=D1=82=D0=B0=20=D0=90=D0=BD=D0=B4=D1=80?=
 =?UTF-8?q?=D0=B5=D0=B5=D0=B2=D0=B8=D1=87?= <chalkerx@gmail.com>
Date: Wed, 2 Sep 2020 08:45:04 +0300
Subject: [PATCH 21/27] Drop unuses goog.array methods

---
 google-protobuf.js | 407 +--------------------------------------------
 1 file changed, 2 insertions(+), 405 deletions(-)

diff --git a/google-protobuf.js b/google-protobuf.js
index 5bc9f32..9af2544 100644
--- a/google-protobuf.js
+++ b/google-protobuf.js
@@ -369,421 +369,18 @@ goog.asserts.getType_ = function (a) {
     : typeof a;
 };
 goog.array = {};
-goog.NATIVE_ARRAY_PROTOTYPES = goog.TRUSTED_SITE;
-goog.array.ASSUME_NATIVE_FUNCTIONS = 2012 < goog.FEATURESET_YEAR;
-goog.array.peek = function (a) {
-  return a[a.length - 1];
-};
-goog.array.last = goog.array.peek;
-goog.array.indexOf =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.indexOf)
-    ? function (a, b, c) {
-        goog.asserts.assert(null != a.length);
-        return Array.prototype.indexOf.call(a, b, c);
-      }
-    : function (a, b, c) {
-        c = null == c ? 0 : 0 > c ? Math.max(0, a.length + c) : c;
-        if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.indexOf(b, c) : -1;
-        for (; c < a.length; c++) if (c in a && a[c] === b) return c;
-        return -1;
-      };
-goog.array.lastIndexOf =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.lastIndexOf)
-    ? function (a, b, c) {
-        goog.asserts.assert(null != a.length);
-        return Array.prototype.lastIndexOf.call(a, b, null == c ? a.length - 1 : c);
-      }
-    : function (a, b, c) {
-        c = null == c ? a.length - 1 : c;
-        0 > c && (c = Math.max(0, a.length + c));
-        if (goog.isString(a)) return goog.isString(b) && 1 == b.length ? a.lastIndexOf(b, c) : -1;
-        for (; 0 <= c; c--) if (c in a && a[c] === b) return c;
-        return -1;
-      };
-goog.array.forEach =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.forEach)
-    ? function (a, b, c) {
+goog.array.forEach = function (a, b, c) {
         goog.asserts.assert(null != a.length);
         Array.prototype.forEach.call(a, b, c);
       }
-    : function (a, b, c) {
-        for (var d = a.length, e = goog.isString(a) ? a.split('') : a, f = 0; f < d; f++)
-          f in e && b.call(c, e[f], f, a);
-      };
-goog.array.forEachRight = function (a, b, c) {
-  var d = a.length,
-    e = goog.isString(a) ? a.split('') : a;
-  for (--d; 0 <= d; --d) d in e && b.call(c, e[d], d, a);
-};
-goog.array.filter =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.filter)
-    ? function (a, b, c) {
-        goog.asserts.assert(null != a.length);
-        return Array.prototype.filter.call(a, b, c);
-      }
-    : function (a, b, c) {
-        for (var d = a.length, e = [], f = 0, g = goog.isString(a) ? a.split('') : a, h = 0; h < d; h++)
-          if (h in g) {
-            var k = g[h];
-            b.call(c, k, h, a) && (e[f++] = k);
-          }
-        return e;
-      };
-goog.array.map =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.map)
-    ? function (a, b, c) {
+goog.array.map = function (a, b, c) {
         goog.asserts.assert(null != a.length);
         return Array.prototype.map.call(a, b, c);
       }
-    : function (a, b, c) {
-        for (var d = a.length, e = Array(d), f = goog.isString(a) ? a.split('') : a, g = 0; g < d; g++)
-          g in f && (e[g] = b.call(c, f[g], g, a));
-        return e;
-      };
-goog.array.reduce =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduce)
-    ? function (a, b, c, d) {
-        goog.asserts.assert(null != a.length);
-        d && (b = goog.bind(b, d));
-        return Array.prototype.reduce.call(a, b, c);
-      }
-    : function (a, b, c, d) {
-        var e = c;
-        goog.array.forEach(a, function (c, g) {
-          e = b.call(d, e, c, g, a);
-        });
-        return e;
-      };
-goog.array.reduceRight =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.reduceRight)
-    ? function (a, b, c, d) {
-        goog.asserts.assert(null != a.length);
-        goog.asserts.assert(null != b);
-        d && (b = goog.bind(b, d));
-        return Array.prototype.reduceRight.call(a, b, c);
-      }
-    : function (a, b, c, d) {
-        var e = c;
-        goog.array.forEachRight(a, function (c, g) {
-          e = b.call(d, e, c, g, a);
-        });
-        return e;
-      };
-goog.array.some =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.some)
-    ? function (a, b, c) {
-        goog.asserts.assert(null != a.length);
-        return Array.prototype.some.call(a, b, c);
-      }
-    : function (a, b, c) {
-        for (var d = a.length, e = goog.isString(a) ? a.split('') : a, f = 0; f < d; f++)
-          if (f in e && b.call(c, e[f], f, a)) return !0;
-        return !1;
-      };
-goog.array.every =
-  goog.NATIVE_ARRAY_PROTOTYPES && (goog.array.ASSUME_NATIVE_FUNCTIONS || Array.prototype.every)
-    ? function (a, b, c) {
-        goog.asserts.assert(null != a.length);
-        return Array.prototype.every.call(a, b, c);
-      }
-    : function (a, b, c) {
-        for (var d = a.length, e = goog.isString(a) ? a.split('') : a, f = 0; f < d; f++)
-          if (f in e && !b.call(c, e[f], f, a)) return !1;
-        return !0;
-      };
-goog.array.count = function (a, b, c) {
-  var d = 0;
-  goog.array.forEach(
-    a,
-    function (a, f, g) {
-      b.call(c, a, f, g) && ++d;
-    },
-    c
-  );
-  return d;
-};
-goog.array.find = function (a, b, c) {
-  b = goog.array.findIndex(a, b, c);
-  return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
-};
-goog.array.findIndex = function (a, b, c) {
-  for (var d = a.length, e = goog.isString(a) ? a.split('') : a, f = 0; f < d; f++)
-    if (f in e && b.call(c, e[f], f, a)) return f;
-  return -1;
-};
-goog.array.findRight = function (a, b, c) {
-  b = goog.array.findIndexRight(a, b, c);
-  return 0 > b ? null : goog.isString(a) ? a.charAt(b) : a[b];
-};
-goog.array.findIndexRight = function (a, b, c) {
-  var d = a.length,
-    e = goog.isString(a) ? a.split('') : a;
-  for (--d; 0 <= d; d--) if (d in e && b.call(c, e[d], d, a)) return d;
-  return -1;
-};
-goog.array.contains = function (a, b) {
-  return 0 <= goog.array.indexOf(a, b);
-};
-goog.array.isEmpty = function (a) {
-  return 0 == a.length;
-};
-goog.array.clear = function (a) {
-  if (!goog.isArray(a)) for (var b = a.length - 1; 0 <= b; b--) delete a[b];
-  a.length = 0;
-};
-goog.array.insert = function (a, b) {
-  goog.array.contains(a, b) || a.push(b);
-};
-goog.array.insertAt = function (a, b, c) {
-  goog.array.splice(a, c, 0, b);
-};
-goog.array.insertArrayAt = function (a, b, c) {
-  goog.partial(goog.array.splice, a, c, 0).apply(null, b);
-};
-goog.array.insertBefore = function (a, b, c) {
-  var d;
-  2 == arguments.length || 0 > (d = goog.array.indexOf(a, c)) ? a.push(b) : goog.array.insertAt(a, b, d);
-};
-goog.array.remove = function (a, b) {
-  b = goog.array.indexOf(a, b);
-  var c;
-  (c = 0 <= b) && goog.array.removeAt(a, b);
-  return c;
-};
-goog.array.removeLast = function (a, b) {
-  b = goog.array.lastIndexOf(a, b);
-  return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
-};
-goog.array.removeAt = function (a, b) {
-  goog.asserts.assert(null != a.length);
-  return 1 == Array.prototype.splice.call(a, b, 1).length;
-};
-goog.array.removeIf = function (a, b, c) {
-  b = goog.array.findIndex(a, b, c);
-  return 0 <= b ? (goog.array.removeAt(a, b), !0) : !1;
-};
-goog.array.removeAllIf = function (a, b, c) {
-  var d = 0;
-  goog.array.forEachRight(a, function (e, f) {
-    b.call(c, e, f, a) && goog.array.removeAt(a, f) && d++;
-  });
-  return d;
-};
-goog.array.concat = function (a) {
-  return Array.prototype.concat.apply([], arguments);
-};
-goog.array.join = function (a) {
-  return Array.prototype.concat.apply([], arguments);
-};
-goog.array.toArray = function (a) {
-  var b = a.length;
-  if (0 < b) {
-    for (var c = Array(b), d = 0; d < b; d++) c[d] = a[d];
-    return c;
-  }
-  return [];
-};
-goog.array.clone = goog.array.toArray;
-goog.array.extend = function (a, b) {
-  for (var c = 1; c < arguments.length; c++) {
-    var d = arguments[c];
-    if (goog.isArrayLike(d)) {
-      var e = a.length || 0,
-        f = d.length || 0;
-      a.length = e + f;
-      for (var g = 0; g < f; g++) a[e + g] = d[g];
-    } else a.push(d);
-  }
-};
-goog.array.splice = function (a, b, c, d) {
-  goog.asserts.assert(null != a.length);
-  return Array.prototype.splice.apply(a, goog.array.slice(arguments, 1));
-};
 goog.array.slice = function (a, b, c) {
   goog.asserts.assert(null != a.length);
   return 2 >= arguments.length ? Array.prototype.slice.call(a, b) : Array.prototype.slice.call(a, b, c);
 };
-goog.array.removeDuplicates = function (a, b, c) {
-  b = b || a;
-  var d = function (a) {
-    return goog.isObject(a) ? 'o' + goog.getUid(a) : (typeof a).charAt(0) + a;
-  };
-  c = c || d;
-  d = {};
-  for (var e = 0, f = 0; f < a.length; ) {
-    var g = a[f++],
-      h = c(g);
-    Object.prototype.hasOwnProperty.call(d, h) || ((d[h] = !0), (b[e++] = g));
-  }
-  b.length = e;
-};
-goog.array.binarySearch = function (a, b, c) {
-  return goog.array.binarySearch_(a, c || goog.array.defaultCompare, !1, b);
-};
-goog.array.binarySelect = function (a, b, c) {
-  return goog.array.binarySearch_(a, b, !0, void 0, c);
-};
-goog.array.binarySearch_ = function (a, b, c, d, e) {
-  for (var f = 0, g = a.length, h; f < g; ) {
-    var k = (f + g) >> 1;
-    var l = c ? b.call(e, a[k], k, a) : b(d, a[k]);
-    0 < l ? (f = k + 1) : ((g = k), (h = !l));
-  }
-  return h ? f : ~f;
-};
-goog.array.sort = function (a, b) {
-  a.sort(b || goog.array.defaultCompare);
-};
-goog.array.stableSort = function (a, b) {
-  for (var c = Array(a.length), d = 0; d < a.length; d++) c[d] = { index: d, value: a[d] };
-  var e = b || goog.array.defaultCompare;
-  goog.array.sort(c, function (a, b) {
-    return e(a.value, b.value) || a.index - b.index;
-  });
-  for (d = 0; d < a.length; d++) a[d] = c[d].value;
-};
-goog.array.sortByKey = function (a, b, c) {
-  var d = c || goog.array.defaultCompare;
-  goog.array.sort(a, function (a, c) {
-    return d(b(a), b(c));
-  });
-};
-goog.array.sortObjectsByKey = function (a, b, c) {
-  goog.array.sortByKey(
-    a,
-    function (a) {
-      return a[b];
-    },
-    c
-  );
-};
-goog.array.isSorted = function (a, b, c) {
-  b = b || goog.array.defaultCompare;
-  for (var d = 1; d < a.length; d++) {
-    var e = b(a[d - 1], a[d]);
-    if (0 < e || (0 == e && c)) return !1;
-  }
-  return !0;
-};
-goog.array.equals = function (a, b, c) {
-  if (!goog.isArrayLike(a) || !goog.isArrayLike(b) || a.length != b.length) return !1;
-  var d = a.length;
-  c = c || goog.array.defaultCompareEquality;
-  for (var e = 0; e < d; e++) if (!c(a[e], b[e])) return !1;
-  return !0;
-};
-goog.array.compare3 = function (a, b, c) {
-  c = c || goog.array.defaultCompare;
-  for (var d = Math.min(a.length, b.length), e = 0; e < d; e++) {
-    var f = c(a[e], b[e]);
-    if (0 != f) return f;
-  }
-  return goog.array.defaultCompare(a.length, b.length);
-};
-goog.array.defaultCompare = function (a, b) {
-  return a > b ? 1 : a < b ? -1 : 0;
-};
-goog.array.inverseDefaultCompare = function (a, b) {
-  return -goog.array.defaultCompare(a, b);
-};
-goog.array.defaultCompareEquality = function (a, b) {
-  return a === b;
-};
-goog.array.binaryInsert = function (a, b, c) {
-  c = goog.array.binarySearch(a, b, c);
-  return 0 > c ? (goog.array.insertAt(a, b, -(c + 1)), !0) : !1;
-};
-goog.array.binaryRemove = function (a, b, c) {
-  b = goog.array.binarySearch(a, b, c);
-  return 0 <= b ? goog.array.removeAt(a, b) : !1;
-};
-goog.array.bucket = function (a, b, c) {
-  for (var d = {}, e = 0; e < a.length; e++) {
-    var f = a[e],
-      g = b.call(c, f, e, a);
-    goog.isDef(g) && (d[g] || (d[g] = [])).push(f);
-  }
-  return d;
-};
-goog.array.toObject = function (a, b, c) {
-  var d = {};
-  goog.array.forEach(a, function (e, f) {
-    d[b.call(c, e, f, a)] = e;
-  });
-  return d;
-};
-goog.array.range = function (a, b, c) {
-  var d = [],
-    e = 0,
-    f = a;
-  c = c || 1;
-  void 0 !== b && ((e = a), (f = b));
-  if (0 > c * (f - e)) return [];
-  if (0 < c) for (a = e; a < f; a += c) d.push(a);
-  else for (a = e; a > f; a += c) d.push(a);
-  return d;
-};
-goog.array.repeat = function (a, b) {
-  for (var c = [], d = 0; d < b; d++) c[d] = a;
-  return c;
-};
-goog.array.flatten = function (a) {
-  for (var b = [], c = 0; c < arguments.length; c++) {
-    var d = arguments[c];
-    if (goog.isArray(d))
-      for (var e = 0; e < d.length; e += 8192) {
-        var f = goog.array.slice(d, e, e + 8192);
-        f = goog.array.flatten.apply(null, f);
-        for (var g = 0; g < f.length; g++) b.push(f[g]);
-      }
-    else b.push(d);
-  }
-  return b;
-};
-goog.array.rotate = function (a, b) {
-  goog.asserts.assert(null != a.length);
-  a.length &&
-    ((b %= a.length),
-    0 < b
-      ? Array.prototype.unshift.apply(a, a.splice(-b, b))
-      : 0 > b && Array.prototype.push.apply(a, a.splice(0, -b)));
-  return a;
-};
-goog.array.moveItem = function (a, b, c) {
-  goog.asserts.assert(0 <= b && b < a.length);
-  goog.asserts.assert(0 <= c && c < a.length);
-  b = Array.prototype.splice.call(a, b, 1);
-  Array.prototype.splice.call(a, c, 0, b[0]);
-};
-goog.array.zip = function (a) {
-  if (!arguments.length) return [];
-  for (var b = [], c = arguments[0].length, d = 1; d < arguments.length; d++)
-    arguments[d].length < c && (c = arguments[d].length);
-  for (d = 0; d < c; d++) {
-    for (var e = [], f = 0; f < arguments.length; f++) e.push(arguments[f][d]);
-    b.push(e);
-  }
-  return b;
-};
-goog.array.shuffle = function (a, b) {
-  b = b || Math.random;
-  for (var c = a.length - 1; 0 < c; c--) {
-    var d = Math.floor(b() * (c + 1)),
-      e = a[c];
-    a[c] = a[d];
-    a[d] = e;
-  }
-};
-goog.array.copyByIndex = function (a, b) {
-  var c = [];
-  goog.array.forEach(b, function (b) {
-    c.push(a[b]);
-  });
-  return c;
-};
-goog.array.concatMap = function (a, b, c) {
-  return goog.array.concat.apply([], goog.array.map(a, b, c));
-};
 goog.crypt = {};
 goog.crypt.stringToByteArray = function (a) {
   for (var b = [], c = 0, d = 0; d < a.length; d++) {
-- 
2.28.0

